/*
 * The MIT License
 *
 *    Copyright (c) 2012, benas (md.benhassine@gmail.com)
 *
 *    Permission is hereby granted, free of charge, to any person obtaining a copy
 *    of this software and associated documentation files (the "Software"), to deal
 *    in the Software without restriction, including without limitation the rights
 *    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *    copies of the Software, and to permit persons to whom the Software is
 *    furnished to do so, subject to the following conditions:
 *
 *    The above copyright notice and this permission notice shall be included in
 *    all copies or substantial portions of the Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *    THE SOFTWARE.
 */

package net.benas.cb4j.monitor.gui;

import net.benas.cb4j.core.api.BatchReport;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

import java.awt.*;
import java.util.Date;

/**
 * A graphical interface for CB4J monitor.
 * @author benas (md.benhassine@gmail.com)
 */
public class CB4JMonitor extends javax.swing.JFrame {

    public CB4JMonitor(String host, String port) {

        super("CB4J Monitor @ " + host + ":" + port);

        arrayOfPaint = createPaint();

        dataset = new DefaultCategoryDataset();

        chart = createChart(dataset);

        chartPanel = new ChartPanel(chart);
        chartPanel.setPopupMenu(null);
        chartPanel.setMouseZoomable(false);
        chartPanel.setOpaque(true);
        chartPanel.setFocusable(false);

        initComponents();
        progressBar.setStringPainted(true);
        statsPanel.setLayout(new java.awt.BorderLayout());
        statsPanel.add(chartPanel);
        statsPanel.validate();
        setResizable(false);
        pack();
    }

    /**
     * This method is generated using the NetBeans Swing GUI Builder.
     * To edit the GUI, please open the CB4JMonitor.form using this editor and regenerate the following code.
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        statsPanel = new javax.swing.JPanel();
        batchPanel = new javax.swing.JPanel();
        startTimeLabel = new javax.swing.JLabel();
        startTimeTextLabel = new javax.swing.JLabel();
        endTimeLabel = new javax.swing.JLabel();
        endTimeTextLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        durationTextLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        statusTextLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        totalTextLabel = new javax.swing.JLabel();
        recordsPanel = new javax.swing.JPanel();
        ignoredLabel = new javax.swing.JLabel();
        ignoredTextLabel = new javax.swing.JLabel();
        rejectedLabel = new javax.swing.JLabel();
        rejectedTextLabel = new javax.swing.JLabel();
        errorsLabel = new javax.swing.JLabel();
        errorsTextLabel = new javax.swing.JLabel();
        processedTextLabel = new javax.swing.JLabel();
        processedLabel = new javax.swing.JLabel();
        currentRecordLabel = new javax.swing.JLabel();
        currentRecordTextLabel = new javax.swing.JLabel();
        progressPanel = new javax.swing.JPanel();
        progressLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics"));

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
                statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        statsPanelLayout.setVerticalGroup(
                statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 258, Short.MAX_VALUE)
        );

        batchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Batch"));

        startTimeLabel.setText("Start time:");

        startTimeTextLabel.setText("");

        endTimeLabel.setText("End time:");

        endTimeTextLabel.setText("");

        durationLabel.setText("Duration:");

        durationTextLabel.setText("");

        statusLabel.setText("Status:");

        statusTextLabel.setText("");

        totalLabel.setText("Total records:");

        totalTextLabel.setText("");

        javax.swing.GroupLayout batchPanelLayout = new javax.swing.GroupLayout(batchPanel);
        batchPanel.setLayout(batchPanelLayout);
        batchPanelLayout.setHorizontalGroup(
                batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(batchPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(batchPanelLayout.createSequentialGroup()
                                                .addComponent(startTimeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(startTimeTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(batchPanelLayout.createSequentialGroup()
                                                .addComponent(totalLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(totalTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                                        .addGroup(batchPanelLayout.createSequentialGroup()
                                                .addComponent(endTimeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(endTimeTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(batchPanelLayout.createSequentialGroup()
                                                .addComponent(durationLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(durationTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(batchPanelLayout.createSequentialGroup()
                                                .addComponent(statusLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(statusTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        batchPanelLayout.setVerticalGroup(
                batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(batchPanelLayout.createSequentialGroup()
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(startTimeLabel)
                                        .addComponent(startTimeTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(endTimeLabel)
                                        .addComponent(endTimeTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(durationLabel)
                                        .addComponent(durationTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(statusLabel)
                                        .addComponent(statusTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(totalLabel)
                                        .addComponent(totalTextLabel))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        recordsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Records"));

        ignoredLabel.setText("Ignored records:");

        ignoredTextLabel.setText("");

        rejectedLabel.setText("Rejected records:");

        rejectedTextLabel.setText("");

        errorsLabel.setText("Error records:");

        errorsTextLabel.setText("");

        processedTextLabel.setText("");

        processedLabel.setText("Processed records:");

        currentRecordLabel.setText("Current record: ");

        currentRecordTextLabel.setText("");

        javax.swing.GroupLayout recordsPanelLayout = new javax.swing.GroupLayout(recordsPanel);
        recordsPanel.setLayout(recordsPanelLayout);
        recordsPanelLayout.setHorizontalGroup(
                recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                                .addComponent(currentRecordLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(currentRecordTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                                .addComponent(processedLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(processedTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                                .addComponent(ignoredLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(ignoredTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                                .addComponent(rejectedLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(rejectedTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                                .addComponent(errorsLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(errorsTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        recordsPanelLayout.setVerticalGroup(
                recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(recordsPanelLayout.createSequentialGroup()
                                .addGroup(recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(currentRecordLabel)
                                        .addComponent(currentRecordTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ignoredLabel)
                                        .addComponent(ignoredTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rejectedLabel)
                                        .addComponent(rejectedTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(errorsLabel)
                                        .addComponent(errorsTextLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(recordsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(processedLabel)
                                        .addComponent(processedTextLabel))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        progressLabel.setText("Progress:");

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
                progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(progressPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        progressPanelLayout.setVerticalGroup(
                progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(progressPanelLayout.createSequentialGroup()
                                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(progressPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(statsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(batchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(recordsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addContainerGap())))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(batchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(recordsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    // Variables declaration - do not modify
    private javax.swing.JPanel batchPanel;
    private javax.swing.JLabel currentRecordLabel;
    private javax.swing.JLabel currentRecordTextLabel;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel durationTextLabel;
    private javax.swing.JLabel endTimeLabel;
    private javax.swing.JLabel endTimeTextLabel;
    private javax.swing.JLabel errorsLabel;
    private javax.swing.JLabel errorsTextLabel;
    private javax.swing.JLabel ignoredLabel;
    private javax.swing.JLabel ignoredTextLabel;
    private javax.swing.JLabel processedLabel;
    private javax.swing.JLabel processedTextLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JPanel recordsPanel;
    private javax.swing.JLabel rejectedLabel;
    private javax.swing.JLabel rejectedTextLabel;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JLabel startTimeTextLabel;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusTextLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalTextLabel;
    // End of variables declaration

    /**
     * Update the GUI with a new report.
     * @param batchReport the batch report received through JMX notification
     */
    public void update(BatchReport batchReport) {

        long totalInputRecordsNumber = batchReport.getTotalInputRecordsNumber();
        long inputRecordsNumber = batchReport.getInputRecordsNumber();
        long ignoredRecordsNumber = batchReport.getIgnoredRecordsNumber();
        long rejectedRecordsNumber = batchReport.getRejectedRecordsNumber();
        long errorRecordsNumber = batchReport.getErrorRecordsNumber();
        long processedRecordsNumber = inputRecordsNumber - ignoredRecordsNumber - rejectedRecordsNumber - errorRecordsNumber;

        startTimeTextLabel.setText(new Date(batchReport.getStartTime()).toString());
        statusTextLabel.setText("Running");
        totalTextLabel.setText(String.valueOf(totalInputRecordsNumber));
        currentRecordTextLabel.setText(String.valueOf(inputRecordsNumber));
        progressBar.setValue(percent(inputRecordsNumber, totalInputRecordsNumber));
        progressBar.setString(percent(inputRecordsNumber, totalInputRecordsNumber) + "%");
        ignoredTextLabel.setText(ignoredRecordsNumber + " (" + String.valueOf(percent(ignoredRecordsNumber, totalInputRecordsNumber)) + "%)");
        rejectedTextLabel.setText(rejectedRecordsNumber + " (" + String.valueOf(percent(rejectedRecordsNumber, totalInputRecordsNumber)) + "%)");
        processedTextLabel.setText(processedRecordsNumber + " (" + String.valueOf(percent(processedRecordsNumber, totalInputRecordsNumber)) + "%)");
        errorsTextLabel.setText(errorRecordsNumber + " (" + String.valueOf(percent(errorRecordsNumber, totalInputRecordsNumber)) + "%)");

        updateDataset(batchReport);

    }

    /**
     * Update the GUI when a connection-closed event is triggered by JMX.
     * @param batchReport the last batch report instance received via JMX notification
     */
    public void lastUpdate(BatchReport batchReport) {
        update(batchReport);
        long startTime = batchReport.getStartTime();
        long endTime = batchReport.getEndTime();
        statusTextLabel.setText("Finished");
        endTimeTextLabel.setText(new Date(endTime).toString());
        durationTextLabel.setText((endTime - startTime) / 1000 + "s");
    }

    /**
     * Calculate a percent of a progress.
     * @param current the current amount of records processed
     * @param total the total amount of records to process
     * @return the progress in percent
     */
    public static int percent(long current, long total) {
        return ((int) (((float) current / (float) total) * 100));
    }

    /**
     * Updates the chart data set with new data received via JMX notification
     * @param batchReport the last batch report instance received via JMX notification
     */
    private void updateDataset(BatchReport batchReport) {

        long totalInputRecordsNumber = batchReport.getTotalInputRecordsNumber();
        long ignoredRecordsNumber = batchReport.getIgnoredRecordsNumber();
        long rejectedRecordsNumber = batchReport.getRejectedRecordsNumber();
        long errorRecordsNumber = batchReport.getErrorRecordsNumber();
        long processedRecordsNumber = batchReport.getInputRecordsNumber() - ignoredRecordsNumber - rejectedRecordsNumber - errorRecordsNumber;
        DefaultCategoryDataset localDefaultCategoryDataset = new DefaultCategoryDataset();

        localDefaultCategoryDataset.addValue(totalInputRecordsNumber, "", "Total records");
        localDefaultCategoryDataset.addValue(ignoredRecordsNumber, "", "Ignored records");
        localDefaultCategoryDataset.addValue(rejectedRecordsNumber, "", "Rejected records");
        localDefaultCategoryDataset.addValue(errorRecordsNumber, "", "Error records");
        localDefaultCategoryDataset.addValue(processedRecordsNumber, "", "Processed records");

        dataset = localDefaultCategoryDataset;
        chart = createChart(dataset);
        chart.fireChartChanged();

    }

    /*
     * Following are utility instance variables, methods and classes used to draw the GUI chart
     */

    private CategoryDataset dataset;

    private JFreeChart chart;

    private ChartPanel chartPanel;

    private Paint[] arrayOfPaint;

    private static Paint[] createPaint()
    {
        Paint[] arrayOfPaint = new Paint[5];
        arrayOfPaint[0] = new GradientPaint(0.0F, 0.0F, Color.blue, 0.0F, 0.0F, Color.white);
        arrayOfPaint[1] = new GradientPaint(0.0F, 0.0F, Color.gray, 0.0F, 0.0F, Color.white);
        arrayOfPaint[2] = new GradientPaint(0.0F, 0.0F, Color.orange, 0.0F, 0.0F, Color.white);
        arrayOfPaint[3] = new GradientPaint(0.0F, 0.0F, Color.red, 0.0F, 0.0F, Color.white);
        arrayOfPaint[4] = new GradientPaint(0.0F, 0.0F, Color.green, 0.0F, 0.0F, Color.white);
        return arrayOfPaint;
    }

    private JFreeChart createChart(final CategoryDataset dataset) {

        final JFreeChart chart = ChartFactory.createBarChart(
                null, null, null, dataset,
                PlotOrientation.VERTICAL, false, true, false);

        chart.setBackgroundPaint(Color.white);

        CategoryPlot localCategoryPlot = (CategoryPlot)chart.getPlot();
        localCategoryPlot.setDomainGridlinesVisible(true);
        CustomBarRenderer localCustomBarRenderer = new CustomBarRenderer(arrayOfPaint);
        localCustomBarRenderer.setBarPainter(new StandardBarPainter());
        localCustomBarRenderer.setDrawBarOutline(true);
        localCustomBarRenderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        localCustomBarRenderer.setBaseItemLabelsVisible(true);
        localCategoryPlot.setRenderer(localCustomBarRenderer);

        chart.addChangeListener(new UpdateChartChangeListener());

        return chart;
    }

    private class CustomBarRenderer extends BarRenderer
    {
        private Paint[] colors;

        public CustomBarRenderer(Paint[] paramArrayOfPaint)
        {
            this.colors = paramArrayOfPaint;
        }

        public Paint getItemPaint(int paramInt1, int paramInt2)
        {
            return this.colors[(paramInt2 % this.colors.length)];
        }
    }

    private class UpdateChartChangeListener implements ChartChangeListener {

        @Override
        public void chartChanged(ChartChangeEvent event) {
            chartPanel.setChart(chart);
            statsPanel.add(chartPanel);
            statsPanel.validate();
            pack();
        }
    }

}
