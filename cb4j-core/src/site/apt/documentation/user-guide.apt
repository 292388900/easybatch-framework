Using CB4J

  To use CB4J, you have to :

  * Supply configuration parameters

  * Register record validators, mapper and processor

  []

* Configuration parameters

  To configure CB4J, you must supply a set of predefined parameters (see table below).
  You can configure CB4J in two ways :

  * With a configuration file (standard java properties file)

  * With a java.util.Properties when using configuration API

  []

  Configuration parameters are defined in the following table :

*-----------*--------------*--------------*----------------+
| Parameter | Description | Required | Default Value  |
*-----------*--------------*--------------*----------------+
| input.data.path | absolute path of input data file to process | true | N/A  |
*-----------*--------------*--------------*----------------+
| input.data.encoding | input data file encoding | false | If not specified, the system's default encoding will be used to read data  |
*-----------*--------------*--------------*----------------+
| input.data.skipHeader | Specify if CB4J should skip the first record | false | If not specified, default is set to false  |
*-----------*--------------*--------------*----------------+
| input.record.separator | The fields separator in a record | false | If not specified, the default is set to ',' |
*-----------*--------------*--------------*----------------+
| input.record.size | The record size (number of fields) | true | N/A |
*-----------*--------------*--------------*----------------+
| output.data.ignored | Absolute path to the log file of ignored records | false | $\{input.data\}-ignored.log. The extension of the input data file (if any) will be removed  |
*-----------*--------------*--------------*----------------+
| output.data.rejected |  Absolute path to the log file of rejected records | false | $\{input.data\}-rejected.log. The extension of the input data file (if any) will be removed  |
*-----------*--------------*--------------*----------------+

* Registering fields validators

* Registering record/Object mapper

* Registering fields validators

Extending CB4J

  CB4J comes with default implementation of commons requirements and let you extends it as you need.
  In this section, we will show how you can extends CB4J.

